import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.geometry.Insets;
import java.util.Collections;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
import javafx.scene.control.Button;
import javafx.animation.PauseTransition;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.scene.media.Media;
import javafx.scene.layout.*;
import javafx.scene.text.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.geometry.*;
import javafx.scene.media.MediaPlayer;
import javafx.scene.media.MediaView;
import javafx.stage.Stage;
import javafx.util.Duration;
import javafx.animation.FadeTransition;
import java.io.File;
import javafx.scene.control.Dialog;
import javafx.scene.effect.ColorAdjust;
import javafx.scene.control.TextField;
import javafx.scene.control.ButtonType;
import java.util.Set;
import java.util.HashSet;
import javafx.scene.Node;

public class GameUI extends Application
{
    private ImageView backgroundImageView;
    private Text title;
    private static StackPane root;
    private VBox buttonBox;
    private Button creditsButton;
    private Button backButton;
    private Button playButton;
    private Button wipButton;
    private MediaPlayer introSongPlayer;
    private MediaPlayer buttonPressPlayer;
    public static List<Pokemon> pokemonList = PokemonGame.createPokemon();
    public static Pokemon selectedPokemon = PokemonGame.getRandomPokemon(pokemonList);

    @Override
    public void start(Stage primaryStage)
    {   
        // Create the list of PokÃ©mon and pick a random one
        root = new StackPane();
        playIntroSong();
        try
        {
            OAuthRedirectServer.main(new String[0]);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        } //start local server, cant pass args so pass empty array
        
        Image initialBackgroundImage = new Image("file:resources/backdrop.jpg");
        backgroundImageView = new ImageView(initialBackgroundImage);
        backgroundImageView.setPreserveRatio(false);
        backgroundImageView.setFitWidth(800);
        backgroundImageView.setFitHeight(600);

        title = new Text("TitlePlaceHolder");
        title.setFont(Font.font("Arial", 48));
        title.setStyle("-fx-fill: white; -fx-stroke: black; -fx-stroke-width: 2;");

        addSmoothFloatyEffectToTitle();

        playButton = createStyledButton("Play", "#007bff", "#0056b3");
        creditsButton = createStyledButton("Credits", "#28a745", "#1c7430");
        wipButton = createStyledButton("WIP", "#ffc107", "#e0a800");

        setButtonHoverEffect(playButton, "#0056b3");
        setButtonHoverEffect(creditsButton, "#218838");
        setButtonHoverEffect(wipButton, "#e0a800");

        buttonBox = new VBox(10);
        buttonBox.setAlignment(Pos.CENTER);
        buttonBox.getChildren().addAll(playButton, creditsButton, wipButton);

        root.getChildren().addAll(backgroundImageView, title, buttonBox);
        StackPane.setAlignment(title, Pos.TOP_CENTER);
        StackPane.setAlignment(buttonBox, Pos.CENTER);

        StackPane.setMargin(title, new Insets(100, 0, 0, 0));
        StackPane.setMargin(buttonBox, new Insets(150, 0, 0, 0));

        Scene scene = new Scene(root, 800, 600);

        scene.widthProperty().addListener((obs, oldVal, newVal) -> backgroundImageView.setFitWidth(scene.getWidth()));
        scene.heightProperty().addListener((obs, oldVal, newVal) -> backgroundImageView.setFitHeight(scene.getHeight()));

        primaryStage.setTitle("Java-Final-Project");
        primaryStage.setScene(scene);
        primaryStage.show();

        playButton.setOnAction(e -> {
            playButtonPressSound();
            changeScreen(playButton, root, "Play");
            stopIntroSong();
        });
        creditsButton.setOnAction(e -> {
            playButtonPressSound();
            changeScreen(creditsButton, root, "Credits");
        });
        wipButton.setOnAction(e -> {
            playButtonPressSound();
            changeScreen(wipButton, root, "WIP");
        });
    }

    private Button createStyledButton(String text, String bgColor, String borderColor)
    {
        Button button = new Button(text);
        button.setStyle(String.format(
            "-fx-font-size: 30px; " +
            "-fx-padding: 10 20; " +
            "-fx-background-color: %s; " +
            "-fx-text-fill: white; " +
            "-fx-border-radius: 10px; " +
            "-fx-background-radius: 10px; " +
            "-fx-border: 2px solid %s; " +
            "-fx-effect: dropshadow(three-pass-box, rgba(0, 0, 0, 0.2), 5, 0, 0, 2);",
            bgColor, borderColor));
        return button;
    }

    private void setButtonHoverEffect(Button button, String hoverColor)
    {
        button.setOnMouseEntered(e -> button.setStyle(button.getStyle().replaceFirst("-fx-background-color: #[a-fA-F0-9]{6};", "-fx-background-color: " + hoverColor + ";")));
        button.setOnMouseExited(e -> button.setStyle(button.getStyle().replaceFirst("-fx-background-color: #[a-fA-F0-9]{6};", "-fx-background-color: #007bff;")));
    }

    private void addSmoothFloatyEffectToTitle()
    {
        Timeline timeline = new Timeline(
            new KeyFrame(Duration.ZERO,
                new KeyValue(title.translateYProperty(), 0),
                new KeyValue(title.scaleXProperty(), 1),
                new KeyValue(title.scaleYProperty(), 1),
                new KeyValue(title.rotateProperty(), 0)
            ),
            new KeyFrame(Duration.seconds(2),
                new KeyValue(title.translateYProperty(), -20),
                new KeyValue(title.scaleXProperty(), 1.1),
                new KeyValue(title.scaleYProperty(), 1.1),
                new KeyValue(title.rotateProperty(), 10)
            ),
            new KeyFrame(Duration.seconds(4),
                new KeyValue(title.translateYProperty(), 0),
                new KeyValue(title.scaleXProperty(), 1),
                new KeyValue(title.scaleYProperty(), 1),
                new KeyValue(title.rotateProperty(), 0)
            )
        );

        timeline.setCycleCount(Timeline.INDEFINITE);
        timeline.setAutoReverse(true);
        timeline.play();
    }

    private void playIntroSong()
    {
        String songFilePath = new File("resources/introSong.mp3").toURI().toString();
        Media introMedia = new Media(songFilePath);
        introSongPlayer = new MediaPlayer(introMedia);
        introSongPlayer.setVolume(0.3);
        introSongPlayer.setCycleCount(MediaPlayer.INDEFINITE);
        introSongPlayer.play();
    }

    private void stopIntroSong()
    {
        if (introSongPlayer != null)
        {
            introSongPlayer.stop();
        }
    }

    private void playButtonPressSound()
    {
        String buttonPressSoundPath = new File("resources/buttonPress.mp3").toURI().toString();
        Media buttonPressMedia = new Media(buttonPressSoundPath);
        buttonPressPlayer = new MediaPlayer(buttonPressMedia);
        buttonPressPlayer.setOnEndOfMedia(() -> buttonPressPlayer.dispose());
        buttonPressPlayer.play();
    }

    private void changeScreen(Button button, StackPane root, String buttonType)
    {
        backgroundImageView.setVisible(false);
        title.setVisible(false);
        buttonBox.setVisible(false);

        String videoFilePath = new File("resources/transScreen.mp4").toURI().toString();

        try
        {
            Media media = new Media(videoFilePath);
            MediaPlayer mediaPlayer = new MediaPlayer(media);
            MediaView mediaView = new MediaView(mediaPlayer);
            mediaView.setPreserveRatio(false);
            mediaView.setFitWidth(800);
            mediaView.setFitHeight(600);

            root.getChildren().add(mediaView);

            mediaPlayer.play();

            mediaPlayer.setOnEndOfMedia(() -> {
                root.getChildren().remove(mediaView);

                if ("Play".equals(buttonType))
                {
                    startGame(root);
                }
                else if ("Credits".equals(buttonType) || "WIP".equals(buttonType))
                {
                    backgroundImageView.setImage(new Image("file:resources/black.jpg"));
                    backgroundImageView.setVisible(true);
                    createBackButton(root);
                }
                else
                {
                    resetScreen(root);
                }

                button.setDisable(false);
            });

            mediaPlayer.setOnError(() -> {
                root.getChildren().remove(mediaView);
                resetScreen(root);
                button.setDisable(false);
            });
        }
        catch (Exception e)
        {
            resetScreen(root);
            button.setDisable(false);
        }
    }

    private void startGame(StackPane root)
    {
        String[] rules = {
            "We are going to do a quick overview of the game and it's rules, Click the screen to procced to the next slide",
            "This game is a interactive streaming version of the classc Who's that Pokemon! game",
            "A black outline of the Pokemon will be shown and four options to guess from given underneath labelled 1, 2, 3, 4",
            "Enter your twitch channel name in the popup box and the chat reading will begin when the Outline is displayed",
            "The game will take inputs of 1 to 4 from your chat and output the most frequent number as the selected guess",
            "After 15 seconds the correct answer will be displayed, and your wrong / right guess will be recorded",
            "After you attempt 10 randomly selected Pokemon your overall record will be displayed along with accuracy"
        };
    
        displayRules(root, rules);
    }
    
    private void displayRules(StackPane root, String[] rules)
    {
        StackPane rulesPane = new StackPane();
        rulesPane.setStyle("-fx-background-color: black;");
        rulesPane.setPrefSize(800, 600);
    
        Text ruleText = new Text();
        ruleText.setFont(Font.font("Arial", 36));
        ruleText.setStyle("-fx-fill: white; -fx-stroke: black; -fx-stroke-width: 1;");
        ruleText.setWrappingWidth(700);
    
        rulesPane.getChildren().add(ruleText);
        StackPane.setAlignment(ruleText, Pos.CENTER);
        root.getChildren().add(rulesPane);
    
        final int[] currentPage = {0};
        final long[] lastClickTime = {System.currentTimeMillis()};
    
        rulesPane.setOnMouseClicked(e -> {
            long currentTime = System.currentTimeMillis();
            long delay = currentPage[0] == 0 ? 1000 : 700; // 1 second for the first page, 0.7 seconds for the rest.
    
            if (currentTime - lastClickTime[0] < delay)
            {
                return; // Ignore clicks during the delay period.
            }
    
            if (currentPage[0] < rules.length)
            {
                String nextRule = rules[currentPage[0]++];
                playPageTurnEffect(ruleText, nextRule);
                lastClickTime[0] = currentTime;
            }
            else
            {
                root.getChildren().remove(rulesPane);
                initializeMainGame(root);
            }
        });
    
        // Start with the first rule after a 1-second delay.
        Timeline initialDelay = new Timeline(new KeyFrame(Duration.seconds(1), e -> {
            playPageTurnEffect(ruleText, rules[currentPage[0]++]);
            lastClickTime[0] = System.currentTimeMillis();
        }));
        initialDelay.play();
    }

    private void playPageTurnEffect(Text ruleText, String newRule)
    {
        Timeline fadeOut = new Timeline(
            new KeyFrame(Duration.ZERO, new KeyValue(ruleText.opacityProperty(), 1)),
            new KeyFrame(Duration.seconds(0.25), new KeyValue(ruleText.opacityProperty(), 0))
        );
    
        Timeline fadeIn = new Timeline(
            new KeyFrame(Duration.ZERO, new KeyValue(ruleText.opacityProperty(), 0)),
            new KeyFrame(Duration.seconds(0.25), new KeyValue(ruleText.opacityProperty(), 1))
        );
    
        fadeOut.setOnFinished(e -> ruleText.setText(newRule));
        fadeOut.play();
        fadeIn.setDelay(Duration.seconds(0.25));
        fadeIn.play();
    }

    private void initializeMainGame(StackPane root)
    {
        showChannelSelectionDialog();
    }

   private void showChannelSelectionDialog()
    {
        System.out.println("showChannelSelectionDialog() called.");
    
        // Create the dialog.
        Dialog<String> dialog = new Dialog<>();
        dialog.setTitle("Channel Selection");
        dialog.setHeaderText("Enter your channel name and select a platform:");
    
        // Create the input field for the channel name.
        TextField channelNameField = new TextField();
        channelNameField.setPromptText("Enter your channel name");
    
        // Create buttons for Facebook and Twitch.
        ButtonType facebookButtonType = new ButtonType("Facebook");
        ButtonType twitchButtonType = new ButtonType("Twitch");
    
        dialog.getDialogPane().getButtonTypes().addAll(facebookButtonType, twitchButtonType);
    
        // Add the input field to the dialog.
        VBox dialogContent = new VBox(10, channelNameField);
        dialogContent.setPadding(new Insets(10));
        dialogContent.setAlignment(Pos.CENTER);
        dialog.getDialogPane().setContent(dialogContent);
    
        // Disable buttons initially
        Button facebookButton = (Button) dialog.getDialogPane().lookupButton(facebookButtonType);
        Button twitchButton = (Button) dialog.getDialogPane().lookupButton(twitchButtonType);
        facebookButton.setDisable(true);
        twitchButton.setDisable(true);
    
        // Add a listener to enable buttons when text is entered.
        channelNameField.textProperty().addListener((obs, oldText, newText) -> {
            boolean validInput = !newText.trim().isEmpty();
            facebookButton.setDisable(!validInput);
            twitchButton.setDisable(!validInput);
    
            // Debugging: Track button enable/disable state
            System.out.println("Channel Name: " + newText);
            System.out.println("Facebook Button Disabled: " + facebookButton.isDisabled());
            System.out.println("Twitch Button Disabled: " + twitchButton.isDisabled());
        });
    
        // Handle the result.
        dialog.setResultConverter(dialogButton -> {
            if (dialogButton == facebookButtonType)
            {
                System.out.println("Facebook selected with channel name: " + channelNameField.getText().trim());
                return "Facebook:" + channelNameField.getText().trim();
            }
            else if (dialogButton == twitchButtonType)
            {
                System.out.println("Twitch selected with channel name: " + channelNameField.getText().trim());
                return "Twitch:" + channelNameField.getText().trim();
            }
            return null;
        });
    
        // Show the dialog and handle the result
        dialog.showAndWait().ifPresent(resultString -> {
            System.out.println("Dialog closed with result: " + resultString);
    
            String[] parts = resultString.split(":", 2);
            if (parts.length == 2)
            {
                String platform = parts[0];  // Platform (Facebook or Twitch)
                String channelName = parts[1];  // Channel name
                System.out.println("Parsed platform: " + platform);
                System.out.println("Parsed channel name: " + channelName);
    
                // Pass the values to the startGameWithChannel function
                startGameWithChannel(platform, channelName);
            }
            else
            {
                System.out.println("Dialog was cancelled or input was invalid.");
            }
        });
    }
    
    private void startGameWithChannel(String platform, String channelName) 
    {
        System.out.println("startGameWithChannel() called.");
        System.out.println("Platform: " + platform);
        System.out.println("Channel Name: " + channelName);
    
        TwitchChatProcessor processor = new TwitchChatProcessor();
        System.out.println("TwitchChatProcessor instance created.");
        processor.initializeUI(platform, channelName);
    
        // Change the background image for the game view
        Image initialBackgroundImage = new Image("file:resources/whosThatBG.jpg");
        backgroundImageView.setImage(initialBackgroundImage);
       
    }
    
    public void startRound(Pokemon selectedPokemon)
    {
        displayPokemonBlack(selectedPokemon, root);
        createPokemonNameRectangles(pokemonList, selectedPokemon);
    }
    
    private void createPokemonNameRectangles(List<Pokemon> pokemonList, Pokemon selectedPokemon)
    {
        // Create a container for the rectangles at the bottom
        HBox rectanglesContainer = new HBox(20); // 20px spacing between rectangles
        rectanglesContainer.setAlignment(Pos.CENTER);
        rectanglesContainer.setPadding(new Insets(20));
        rectanglesContainer.setPrefHeight(150); // Set the preferred height

        // Use VBox or AnchorPane to position it at the bottom
        VBox bottomContainer = new VBox();
        bottomContainer.setAlignment(Pos.BOTTOM_CENTER); // Align content at the bottom
        bottomContainer.getChildren().add(rectanglesContainer); // Add the HBox with rectangles to it

        root.getChildren().add(bottomContainer); // Add the VBox to the root layout

        // Generate unique PokÃ©mon names for the blocks
        Set<String> randomNames = new HashSet<>();
        randomNames.add(selectedPokemon.getName()); // Ensure selected PokÃ©mon is included
        while (randomNames.size() < 4) {
            String randomName = PokemonGame.getRandomPokemon(pokemonList).getName();
            randomNames.add(randomName);
        }

        // Convert the set to a list so we can shuffle it
        List<String> shuffledNames = new ArrayList<>(randomNames);

        // Shuffle the list of names to randomize their order
        Collections.shuffle(shuffledNames);

        // Create rectangles with names and track the index of the correct PokÃ©mon
        int correctIndex = shuffledNames.indexOf(selectedPokemon.getName()); // Get index of correct PokÃ©mon
        List<StackPane> blocks = new ArrayList<>();
        
        for (int i = 0; i < shuffledNames.size(); i++) {
            StackPane block = new StackPane();
            Rectangle rectangle = new Rectangle(150, 100); // Dimensions of each rectangle
            rectangle.setFill(Color.LIGHTGRAY);
            rectangle.setArcWidth(20);
            rectangle.setArcHeight(20);

            Text text = new Text(shuffledNames.get(i));
            text.setFont(Font.font("Arial", FontWeight.BOLD, 14));
            text.setFill(Color.BLACK);

            block.getChildren().addAll(rectangle, text);
            blocks.add(block); // Store the blocks in the list

            rectanglesContainer.getChildren().add(block); // Add block to the HBox
        }
              
    }
    
    private void updatePokemonNameRectangles(List<Pokemon> pokemonList, Pokemon selectedPokemon, HBox rectanglesContainer) 
    {
        // Clear existing rectangles (if needed)
        rectanglesContainer.getChildren().clear();
    
        // Generate unique PokÃ©mon names for the blocks
        Set<String> randomNames = new HashSet<>();
        randomNames.add(selectedPokemon.getName()); // Ensure selected PokÃ©mon is included
        while (randomNames.size() < 4) 
        {
            String randomName = PokemonGame.getRandomPokemon(pokemonList).getName();
            randomNames.add(randomName);
        }
    
        // Convert the set to a list so we can shuffle it
        List<String> shuffledNames = new ArrayList<>(randomNames);
    
        // Shuffle the list of names to randomize their order
        Collections.shuffle(shuffledNames);
    
        // Create new rectangles with updated names
        for (String name : shuffledNames) 
        {
            StackPane block = new StackPane();
            Rectangle rectangle = new Rectangle(150, 100); // Dimensions of each rectangle
            rectangle.setFill(Color.LIGHTGRAY);
            rectangle.setArcWidth(20);
            rectangle.setArcHeight(20);
    
            Text text = new Text(name);
            text.setFont(Font.font("Arial", FontWeight.BOLD, 14));
            text.setFill(Color.BLACK);
    
            block.getChildren().addAll(rectangle, text);
            rectanglesContainer.getChildren().add(block);
        }
    }
    
        // Separate method to highlight the selected box
    private void highlightBox(int selectedIndex, List<StackPane> blocks, int correctIndex) 
    {
        for (int i = 0; i < blocks.size(); i++) 
        {
            StackPane block = blocks.get(i);
            Rectangle rectangle = (Rectangle) block.getChildren().get(0); // Get the rectangle inside the block
            
            if (i == correctIndex) 
            {
                // Correct box
                rectangle.setFill(Color.GREEN);
            } else if (i == selectedIndex) 
            {
                // Highlight the selected (wrong) box in dark red
                rectangle.setFill(Color.DARKRED);
            } else 
            {
                // Incorrect box
                rectangle.setFill(Color.RED);
            }
        }
    
        // Display result based on selected box
        if (selectedIndex == correctIndex) 
        {
            displayResult("Correct!");
        } else 
        {
            displayResult("Wrong!");
        }
    }


    // Separate method to display result message
    private void displayResult(String resultMessage) 
    {
        // Check if the result text already exists
        StackPane existingResultPane = null;
        
        // Iterate through the children to find an existing result message
        for (Node node : root.getChildren()) 
        {
            if (node instanceof StackPane) 
            {
                StackPane pane = (StackPane) node;
                if (pane.getChildren().get(0) instanceof Text) 
                {
                    Text existingText = (Text) pane.getChildren().get(0);
                    if (existingText.getText() != null && !existingText.getText().isEmpty()) 
                    {
                        existingResultPane = pane; // Found the existing result
                        break;
                    }
                }
            }
        }
    
        // If an existing result message is found, update it; otherwise, create a new one
        if (existingResultPane != null) 
        {
            // Update the text of the existing result message
            Text existingText = (Text) existingResultPane.getChildren().get(0);
            existingText.setText(resultMessage);
            // Set the text color based on the result message
            existingText.setFill(resultMessage.equals("Correct!") ? Color.GREEN : Color.RED);
            existingResultPane.setVisible(true); // Ensure it's visible
        } 
        else 
        {
            // Create the result message text
            Text resultText = new Text(resultMessage);
            resultText.setFont(Font.font("Arial", FontWeight.BOLD, 36)); // Larger font size
            // Set the text color based on the result message
            resultText.setFill(resultMessage.equals("Correct!") ? Color.GREEN : Color.RED);
    
            // Create a StackPane for the result text
            StackPane resultPane = new StackPane();
            resultPane.getChildren().add(resultText);
    
            // Add the resultPane to the root layout
            root.getChildren().add(resultPane);
    
            // Create a PauseTransition to delay hiding the result
            PauseTransition pause = new PauseTransition(Duration.seconds(7));
    
            // After 5 seconds, hide the resultPane
            pause.setOnFinished(event -> resultPane.setVisible(false));
    
            // Start the pause transition
            pause.play();
        }
    }


    
    private void displayPokemonInfo(Pokemon selectedPokemon, StackPane root)    
    {
        VBox pokemonInfoBox = new VBox();
        pokemonInfoBox.setSpacing(10);  // Add some spacing between elements
        
        // Display PokÃ©mon image
        Image pokemonImage = new Image("file:" + selectedPokemon.getImageFile());
        ImageView pokemonImageView = new ImageView(pokemonImage);
        pokemonImageView.setPreserveRatio(true);
        pokemonImageView.setFitWidth(200);
        
        // Display PokÃ©mon details
        Text pokemonNameText = new Text("Name: " + selectedPokemon.getName());
        Text pokemonTypeText = new Text("Type: " + selectedPokemon.getType());
        Text pokemonRarityText = new Text("Rarity: " + selectedPokemon.getRarity());
        Text pokemonSizeText = new Text("Size: " + selectedPokemon.getSize());
        
        pokemonInfoBox.getChildren().addAll(pokemonNameText, pokemonTypeText, pokemonRarityText, pokemonSizeText, pokemonImageView);
        
        // Apply fade-in effect
        FadeTransition fadeIn = new FadeTransition(Duration.seconds(2), pokemonImageView);
        fadeIn.setFromValue(0.0);
        fadeIn.setToValue(1.0);
        fadeIn.play();
    
        // Add the new content to the existing root (StackPane)
        root.getChildren().clear();  // Clear existing content (buttons, background, etc.)
        root.getChildren().add(pokemonInfoBox);  // Add PokÃ©mon info
    }
    
    private void displayPokemonBlack(Pokemon selectedPokemon, StackPane root) 
    {
        VBox pokemonInfoBox = new VBox();
        pokemonInfoBox.setSpacing(10);  // Add some spacing between elements
        pokemonInfoBox.setAlignment(Pos.CENTER);  // Center the content horizontally
        
        // Display PokÃ©mon image
        Image pokemonImage = new Image("file:" + selectedPokemon.getImageFile());
        ImageView pokemonImageView = new ImageView(pokemonImage);
        pokemonImageView.setPreserveRatio(true);
        pokemonImageView.setFitWidth(200);
        
        // Apply ColorAdjust effect to make the image black (set brightness to 0)
        ColorAdjust colorAdjust = new ColorAdjust();
        colorAdjust.setBrightness(-1.0);  // Set brightness to -1 to make the image black
        
        // Apply the color adjust effect to the image view
        pokemonImageView.setEffect(colorAdjust);
        
        pokemonInfoBox.getChildren().addAll(pokemonImageView);
        
        // Apply fade-in effect
        FadeTransition fadeIn = new FadeTransition(Duration.seconds(2), pokemonImageView);
        fadeIn.setFromValue(0.0);
        fadeIn.setToValue(1.0);
        fadeIn.play();
        
        // Add the new content to the existing root (StackPane)
        root.getChildren().clear();  // Clear existing content (buttons, background, etc.)
        root.getChildren().add(pokemonInfoBox);  // Add PokÃ©mon info
    }

    private void createBackButton(StackPane root)
    {
        backButton = createStyledButton("Back", "#dc3545", "#c82333");

        StackPane.setAlignment(backButton, Pos.TOP_LEFT);
        StackPane.setMargin(backButton, new Insets(30, 0, 0, 30));

        root.getChildren().add(backButton);

        backButton.setOnAction(e ->     {
            String videoFilePath = new File("resources/transScreen.mp4").toURI().toString();

            try
            {
                Media media = new Media(videoFilePath);
                MediaPlayer mediaPlayer = new MediaPlayer(media);
                MediaView mediaView = new MediaView(mediaPlayer);
                mediaView.setPreserveRatio(false);
                mediaView.setFitWidth(800);
                mediaView.setFitHeight(600);

                root.getChildren().add(mediaView);
                mediaPlayer.play();

                backButton.setDisable(true);

                mediaPlayer.setOnEndOfMedia(() -> 
                {
                    root.getChildren().remove(mediaView);
                    resetScreen(root);
                });

                mediaPlayer.setOnError(() -> 
                {
                    root.getChildren().remove(mediaView);
                    resetScreen(root);
                });
            }
            catch (Exception ex)
            {
                resetScreen(root);
            }
        });
    }

    
    private void resetScreen(StackPane root)
    {
        backgroundImageView.setImage(new Image("file:resources/backdrop.jpg"));
        backgroundImageView.setVisible(true);

        title.setVisible(true);
        buttonBox.setVisible(true);

        playButton.setDisable(false);
        creditsButton.setDisable(false);
        wipButton.setDisable(false);

        if (backButton != null)
        {
            root.getChildren().remove(backButton);
        }

        root.getChildren().removeIf(node -> node instanceof MediaView);
    }

    public static void main(String[] args)
    {
        launch(args);
    }
}
