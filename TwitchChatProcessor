import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.concurrent.*;

public class TwitchChatProcessor extends Application 
{
    private static final int LAYOUT_SPACING = 10;
    private int[] messageCounts;
    private boolean isEntryPeriodActive = false;
    private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);

    private Socket socket;
    private BufferedReader in;
    private PrintWriter out;
    private Stage primaryStage;

    private static final String SERVER = "irc.chat.twitch.tv";
    private static final int PORT = 6667;
    private static String OAUTH_TOKEN = "oauth:yom8rvppzq03fewcs32305jmpfkc37"; // Initial OAuth token
    private static final String CLIENT_ID = "5c1crcl825kuxjwb01bhemnyevtt32";
    private static final String CLIENT_SECRET = "4lu452tydp90f3rwxdru7q3hlkvvo9";
    private static final String NICKNAME = "lopgop123"; // Replace with your username

    private String channel = "UsernameHere"; // Default channel

    public static void main(String[] args) 
    {
        launch(args);
    }

    public void initializeUI(String platform, String channel) 
    {
        VBox layout = new VBox(LAYOUT_SPACING);
        layout.setStyle("-fx-alignment: center;");

        Label resultLabel = new Label("Platform: " + platform + "\nChannel: " + channel);
        Label countLabel1 = new Label("Message 1: 0");
        Label countLabel2 = new Label("Message 2: 0");
        Label countLabel3 = new Label("Message 3: 0");
        Label countLabel4 = new Label("Message 4: 0");
        Label countdownLabel = new Label("Time Left: 0");
        Button startButton = new Button("Start Round");

        startButton.setOnAction(event -> 
        {
            
            //insert show poke function here
            
            startButton.setDisable(true); // Disable the button
            resultLabel.setText("Entry period active. Listening for messages...");
            countLabel1.setText("Message 1: 0");
            countLabel2.setText("Message 2: 0");
            countLabel3.setText("Message 3: 0");
            countLabel4.setText("Message 4: 0");
            countdownLabel.setText("Time Left: 15");
            startEntryPeriod(15, resultLabel, countLabel1, countLabel2, countLabel3, countLabel4, countdownLabel, startButton);
            initializeTwitchClient();// Initialize connection to the new channel
            
            GameUI gameUI = new GameUI();
            Pokemon selectedPokemon = GameUI.selectedPokemon;
            gameUI.startRound(selectedPokemon);
        });

        layout.getChildren().addAll(resultLabel, countLabel1, countLabel2, countLabel3, countLabel4, countdownLabel, startButton);

        if (primaryStage == null) 
        {
            primaryStage = new Stage(); // Create a new stage if it's null
        }

        Scene scene = new Scene(layout, 400, 250);
        primaryStage.setScene(scene);
        primaryStage.setTitle("Twitch Chat Processor");
        primaryStage.show();
    }

    @Override
    public void start(Stage primaryStage) 
    {
        VBox layout = new VBox(LAYOUT_SPACING);
        layout.setStyle("-fx-alignment: center;");

        Label resultLabel = new Label("Press start to begin processing messages.");
        Label countLabel1 = new Label("Message 1: 0");
        Label countLabel2 = new Label("Message 2: 0");
        Label countLabel3 = new Label("Message 3: 0");
        Label countLabel4 = new Label("Message 4: 0");
        Label countdownLabel = new Label("Time Left: 0");
        Button startButton = new Button("Start Entry Period");
        TextField channelField = new TextField(channel);
        channelField.setPromptText("Enter Channel Name");

        startButton.setOnAction(event -> 
        {
            channel = "#" + channelField.getText(); // Get the channel name entered by the user
            startButton.setDisable(true); // Disable the button
            resultLabel.setText("Entry period active. Listening for messages...");
            countLabel1.setText("Message 1: 0");
            countLabel2.setText("Message 2: 0");
            countLabel3.setText("Message 3: 0");
            countLabel4.setText("Message 4: 0");
            countdownLabel.setText("Time Left: 15");
            startEntryPeriod(15, resultLabel, countLabel1, countLabel2, countLabel3, countLabel4, countdownLabel, startButton);
            initializeTwitchClient(); // Initialize connection to the new channel
        });

        layout.getChildren().addAll(channelField, startButton, resultLabel, countLabel1, countLabel2, countLabel3, countLabel4, countdownLabel);

        Scene scene = new Scene(layout, 400, 250);
        primaryStage.setScene(scene);
        primaryStage.setTitle("Twitch Chat Processor");
        primaryStage.show();
    }

    private void initializeTwitchClient() 
    {
        try 
        {
            socket = new Socket(SERVER, PORT);
            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            out = new PrintWriter(new OutputStreamWriter(socket.getOutputStream()), true);
    
            out.println("PASS " + OAUTH_TOKEN);
            out.println("NICK " + NICKNAME);
            out.println("JOIN " + channel);
    
            new Thread(this::listenForMessages).start();
            
            // Schedule the token refresh every 10 minutes
            ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
            scheduler.scheduleAtFixedRate(() -> 
            {
                refreshOAuthToken(); // Refresh the OAuth token periodically
            }, 0, 10, TimeUnit.MINUTES); // 10 minutes interval
    
        } catch (Exception e) 
        {
            e.printStackTrace();
        }
    }


    private void listenForMessages() 
    {
        try 
        {
            String line;
            while ((line = in.readLine()) != null) 
            {
                System.out.println("Twitch IRC: " + line);
                if (line.startsWith("PING")) 
                {
                    out.println("PONG :tmi.twitch.tv");
                } else if (line.contains("PRIVMSG")) 
                {
                    String message = parseMessage(line);
                    processMessage(message);
                }
            }
        } catch (Exception e) 
        {
            e.printStackTrace();
        }
    }

    private String parseMessage(String rawLine) 
    {
        int messageIndex = rawLine.indexOf(" :");
        return (messageIndex != -1) ? rawLine.substring(messageIndex + 2) : "";
    }

    private void startEntryPeriod(int seconds, Label resultLabel, Label countLabel1, Label countLabel2, Label countLabel3, Label countLabel4, Label countdownLabel, Button startButton) {
        messageCounts = new int[4]; // Reset counts
        isEntryPeriodActive = true;
        final int[] countdown = {seconds};

        executor.schedule(() -> 
        {
            isEntryPeriodActive = false;
            Platform.runLater(() -> 
            {
                int mostFrequentCount = determineMostFrequentMessage(countLabel1, countLabel2, countLabel3, countLabel4);
                resultLabel.setText("Entry period over. Most frequent message count: " + mostFrequentCount);
            });
        }, seconds, TimeUnit.SECONDS);

        executor.scheduleAtFixedRate(() -> 
        {
            if (isEntryPeriodActive) 
            {
                Platform.runLater(() -> 
                {
                    countLabel1.setText("Message 1: " + messageCounts[0]);
                    countLabel2.setText("Message 2: " + messageCounts[1]);
                    countLabel3.setText("Message 3: " + messageCounts[2]);
                    countLabel4.setText("Message 4: " + messageCounts[3]);
                });
            }
        }, 0, 1, TimeUnit.SECONDS);

        executor.scheduleAtFixedRate(() -> 
        {
            if (isEntryPeriodActive && countdown[0] > 0) 
            {
                Platform.runLater(() -> 
                {
                    countdownLabel.setText("Time Left: " + countdown[0]);
                    countdown[0]--;
                });
            } else if (countdown[0] == 0) 
            {
                Platform.runLater(() -> countdownLabel.setText("Time Left: 0"));
            }
        }, 0, 1, TimeUnit.SECONDS);
    }

    public void processMessage(String message) {
        if (!isEntryPeriodActive) return;

        if ("1".equals(message) || "2".equals(message) || "3".equals(message) || "4".equals(message)) 
        {
            int value = Integer.parseInt(message);
            messageCounts[value - 1]++;
        }
    }

    private int determineMostFrequentMessage(Label countLabel1, Label countLabel2, Label countLabel3, Label countLabel4) {
        List<MessageCount> counts = new ArrayList<>();
        counts.add(new MessageCount(1, messageCounts[0], countLabel1));
        counts.add(new MessageCount(2, messageCounts[1], countLabel2));
        counts.add(new MessageCount(3, messageCounts[2], countLabel3));
        counts.add(new MessageCount(4, messageCounts[3], countLabel4));

        counts.sort(Comparator.comparingInt(MessageCount::getCount).reversed());

        return counts.get(0).getCount();
    }

    public static void refreshOAuthToken() 
    {
        try 
        {
            String newToken = RefreshToken.refreshAccessToken(); // Call refreshAccessToken from RefreshToken class
            if (newToken != null) 
            {
                OAUTH_TOKEN = newToken; // Update the global OAuth token
                System.out.println("OAuth token refreshed successfully.");
            } 
            else 
            {
                System.err.println("Failed to refresh OAuth token. Received null token.");
            }
        } catch (Exception e) 
        {
            System.err.println("Error refreshing OAuth token: " + e.getMessage());
            e.printStackTrace();
        }
    }




    static class MessageCount 
    {
        private final int messageId;
        private final int count;
        private final Label label;

        public MessageCount(int messageId, int count, Label label) 
        {
            this.messageId = messageId;
            this.count = count;
            this.label = label;
        }

        public int getCount() 
        {
            return count;
        }

        public Label getLabel() 
        {
            return label;
        }
    }
}
